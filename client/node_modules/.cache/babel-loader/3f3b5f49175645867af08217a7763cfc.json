{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/luisfernandolins/ChernoStation/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _slicedToArray from \"/Users/luisfernandolins/ChernoStation/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/luisfernandolins/ChernoStation/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/luisfernandolins/ChernoStation/client/src/context/UserContext.js\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n      {\\n          allUsers {\\n            nodes {\\n              email\\n              id\\n              name\\n              passwordHash\\n              username\\n              nodeId\\n            }\\n          }\\n      }\\n      \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n{\\n    allUsers {\\n      nodes {\\n        email\\n        id\\n        name\\n        passwordHash\\n        username\\n        nodeId\\n      }\\n    }\\n}\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport Queries from \"../../src/queries\";\nimport { client } from '../index';\nimport { gql } from \"apollo-boost\";\nimport { Query } from 'react-apollo';\nvar UserStateContext = React.createContext();\nvar UserDispatchContext = React.createContext();\n\nfunction userReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      return _objectSpread({}, state, {\n        isAuthenticated: true\n      });\n\n    case \"SIGN_OUT_SUCCESS\":\n      return _objectSpread({}, state, {\n        isAuthenticated: false\n      });\n\n    default:\n      {\n        throw new Error(\"Unhandled action type: \".concat(action.type));\n      }\n  }\n}\n\nfunction UserProvider({\n  children\n}) {\n  var _React$useReducer = React.useReducer(userReducer, {\n    isAuthenticated: !!localStorage.getItem(\"id_token\")\n  }),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  return React.createElement(UserStateContext.Provider, {\n    value: state,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(UserDispatchContext.Provider, {\n    value: dispatch,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, children));\n}\n\nfunction useUserState() {\n  var context = React.useContext(UserStateContext);\n\n  if (context === undefined) {\n    throw new Error(\"useUserState must be used within a UserProvider\");\n  }\n\n  return context;\n}\n\nfunction useUserDispatch() {\n  var context = React.useContext(UserDispatchContext);\n\n  if (context === undefined) {\n    throw new Error(\"useUserDispatch must be used within a UserProvider\");\n  }\n\n  return context;\n}\n\nexport { UserProvider, useUserState, useUserDispatch, loginUser, signOut }; // ###########################################################\n\nconst GET_USERS_QUERY = gql(_templateObject());\n\nasync function getUsers() {\n  client.query({\n    query: gql(_templateObject2())\n  }).then(result => {\n    console.log(result);\n    return result;\n  });\n}\n\nasync function loginUser(dispatch, login, password, history, setIsLoading, setError) {\n  setError(false);\n  setIsLoading(true); // let users = null;\n  // Queries.getUsers().then(result => {users = result;});\n  // const users = await getUsers();\n  // await console.log(users);\n\n  return React.createElement(Query, {\n    query: GET_USERS_QUERY,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, ({\n    data\n  }) => {\n    console.log(data);\n  });\n\n  if (!!login && !!password) {\n    setTimeout(() => {\n      localStorage.setItem(\"id_token\", \"1\");\n      dispatch({\n        type: \"LOGIN_SUCCESS\"\n      });\n      setError(null);\n      setIsLoading(false);\n      history.push(\"/app/dashboard\");\n    }, 2000);\n  } else {\n    dispatch({\n      type: \"LOGIN_FAILURE\"\n    });\n    setError(true);\n    setIsLoading(false);\n  }\n}\n\nfunction signOut(dispatch, history) {\n  localStorage.removeItem(\"id_token\");\n  dispatch({\n    type: \"SIGN_OUT_SUCCESS\"\n  });\n  history.push(\"/login\");\n}","map":{"version":3,"sources":["/Users/luisfernandolins/ChernoStation/client/src/context/UserContext.js"],"names":["React","Queries","client","gql","Query","UserStateContext","createContext","UserDispatchContext","userReducer","state","action","type","isAuthenticated","Error","UserProvider","children","useReducer","localStorage","getItem","dispatch","useUserState","context","useContext","undefined","useUserDispatch","loginUser","signOut","GET_USERS_QUERY","getUsers","query","then","result","console","log","login","password","history","setIsLoading","setError","data","setTimeout","setItem","push","removeItem"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Queries from \"../../src/queries\";\nimport { client } from '../index';\nimport { gql } from \"apollo-boost\";\nimport { Query } from 'react-apollo';\n\nvar UserStateContext = React.createContext();\nvar UserDispatchContext = React.createContext();\n\nfunction userReducer(state, action) {\n  switch (action.type) {\n    case \"LOGIN_SUCCESS\":\n      return { ...state, isAuthenticated: true };\n    case \"SIGN_OUT_SUCCESS\":\n      return { ...state, isAuthenticated: false };\n    default: {\n      throw new Error(`Unhandled action type: ${action.type}`);\n    }\n  }\n}\n\nfunction UserProvider({ children }) {\n  var [state, dispatch] = React.useReducer(userReducer, {\n    isAuthenticated: !!localStorage.getItem(\"id_token\"),\n  });\n\n  return (\n    <UserStateContext.Provider value={state}>\n      <UserDispatchContext.Provider value={dispatch}>\n        {children}\n      </UserDispatchContext.Provider>\n    </UserStateContext.Provider>\n  );\n}\n\nfunction useUserState() {\n  var context = React.useContext(UserStateContext);\n  if (context === undefined) {\n    throw new Error(\"useUserState must be used within a UserProvider\");\n  }\n  return context;\n}\n\nfunction useUserDispatch() {\n  var context = React.useContext(UserDispatchContext);\n  if (context === undefined) {\n    throw new Error(\"useUserDispatch must be used within a UserProvider\");\n  }\n  return context;\n}\n\nexport { UserProvider, useUserState, useUserDispatch, loginUser, signOut };\n\n// ###########################################################\n\nconst GET_USERS_QUERY = gql`\n{\n    allUsers {\n      nodes {\n        email\n        id\n        name\n        passwordHash\n        username\n        nodeId\n      }\n    }\n}\n`;\n\nasync function getUsers() {\n  client\n  .query({\n      query: gql`\n      {\n          allUsers {\n            nodes {\n              email\n              id\n              name\n              passwordHash\n              username\n              nodeId\n            }\n          }\n      }\n      `\n  })\n  .then(result => {\n      console.log(result);\n      return result;\n  });\n}\n\nasync function loginUser(dispatch, login, password, history, setIsLoading, setError) {\n  setError(false);\n  setIsLoading(true);\n  // let users = null;\n  // Queries.getUsers().then(result => {users = result;});\n  // const users = await getUsers();\n  // await console.log(users);\n\n  return (<Query query={GET_USERS_QUERY}>\n    {({ data }) => {\n      console.log(data);\n    }}\n  </Query>);\n\n  if (!!login && !!password) {\n    setTimeout(() => {\n      localStorage.setItem(\"id_token\", \"1\");\n      dispatch({ type: \"LOGIN_SUCCESS\" });\n      setError(null);\n      setIsLoading(false);\n\n      history.push(\"/app/dashboard\");\n    }, 2000);\n  } else {\n    dispatch({ type: \"LOGIN_FAILURE\" });\n    setError(true);\n    setIsLoading(false);\n  }\n}\n\nfunction signOut(dispatch, history) {\n  localStorage.removeItem(\"id_token\");\n  dispatch({ type: \"SIGN_OUT_SUCCESS\" });\n  history.push(\"/login\");\n}\n"]},"metadata":{},"sourceType":"module"}