{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\User\\\\QS-ChernoStation\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n            {\\n                allUsers {\\n                  nodes {\\n                    email\\n                    id\\n                    name\\n                    passwordHash\\n                    username\\n                    nodeId\\n                  }\\n                }\\n            }\\n            \"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n            {\\n                allMeasurementTypes {\\n                edges {\\n                    node {\\n                    id\\n                    name\\n                    rulesByMeasurementTypeId {\\n                        nodes {\\n                        description\\n                        alertLevel\\n                        id\\n                        maxValue\\n                        }\\n                    }\\n                    }\\n                }\\n                }\\n            }\\n            \"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport { client } from './index';\nimport { gql } from \"apollo-boost\"; // or you can use `import gql from 'graphql-tag';` instead\n\nexport default class Queries {\n  static getRulesByMeasurement() {\n    client.query({\n      query: gql(_templateObject())\n    }).then(result => console.log(result));\n  }\n\n  static async getUsers() {\n    return client.query({\n      query: gql(_templateObject2())\n    });\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\User\\QS-ChernoStation\\client\\src\\queries.js"],"names":["client","gql","Queries","getRulesByMeasurement","query","then","result","console","log","getUsers"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,MAAT,QAAuB,SAAvB;AACA,SAASC,GAAT,QAAoB,cAApB,C,CACA;;AAEA,eAAe,MAAMC,OAAN,CAAc;AACzB,SAAOC,qBAAP,GAA+B;AAC3BH,IAAAA,MAAM,CACLI,KADD,CACO;AACHA,MAAAA,KAAK,EAAEH,GAAF;AADF,KADP,EAuBCI,IAvBD,CAuBMC,MAAM,IAAIC,OAAO,CAACC,GAAR,CAAYF,MAAZ,CAvBhB;AAwBH;;AAED,eAAaG,QAAb,GAAwB;AACpB,WAAOT,MAAM,CACZI,KADM,CACA;AACHA,MAAAA,KAAK,EAAEH,GAAF;AADF,KADA,CAAP;AAiBD;;AA9CsB","sourcesContent":["import { client } from './index';\r\nimport { gql } from \"apollo-boost\";\r\n// or you can use `import gql from 'graphql-tag';` instead\r\n\r\nexport default class Queries {\r\n    static getRulesByMeasurement() {\r\n        client\r\n        .query({\r\n            query: gql`\r\n            {\r\n                allMeasurementTypes {\r\n                edges {\r\n                    node {\r\n                    id\r\n                    name\r\n                    rulesByMeasurementTypeId {\r\n                        nodes {\r\n                        description\r\n                        alertLevel\r\n                        id\r\n                        maxValue\r\n                        }\r\n                    }\r\n                    }\r\n                }\r\n                }\r\n            }\r\n            `\r\n        })\r\n        .then(result => console.log(result));\r\n    }\r\n\r\n    static async getUsers() {\r\n        return client\r\n        .query({\r\n            query: gql`\r\n            {\r\n                allUsers {\r\n                  nodes {\r\n                    email\r\n                    id\r\n                    name\r\n                    passwordHash\r\n                    username\r\n                    nodeId\r\n                  }\r\n                }\r\n            }\r\n            `\r\n        });\r\n      }\r\n\r\n\r\n}"]},"metadata":{},"sourceType":"module"}