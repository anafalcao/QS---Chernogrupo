{"ast":null,"code":"import _objectSpread from \"/Users/luisfernandolins/ChernoStation/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/luisfernandolins/ChernoStation/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/luisfernandolins/ChernoStation/client/src/pages/dashboard/Dashboard.js\";\nimport React, { useState } from \"react\";\nimport { Grid, LinearProgress, Select, OutlinedInput, MenuItem, TextField, InputLabel, FormControl, Button, Paper } from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport { CartesianGrid, Legend, Tooltip, ResponsiveContainer, ComposedChart, AreaChart, LineChart, Line, Area, PieChart, Pie, Cell, YAxis, XAxis } from \"recharts\"; // styles\n\nimport useStyles from \"./styles\"; // components\n\nimport mock from \"./mock\";\nimport Widget from \"../../components/Widget\";\nimport PageTitle from \"../../components/PageTitle\";\nimport { Typography } from \"../../components/Wrappers\";\nimport Dot from \"../../components/Sidebar/components/Dot\";\nimport Table from \"./components/Table/Table\";\nimport BigStat from \"./components/BigStat/BigStat\";\nimport Queries from \"../../queries\";\nconst mainChartData = getMainChartData();\nconst PieChartData = [{\n  name: \"Group A\",\n  value: 400,\n  color: \"primary\"\n}, {\n  name: \"Group B\",\n  value: 300,\n  color: \"secondary\"\n}, {\n  name: \"Group C\",\n  value: 300,\n  color: \"warning\"\n}, {\n  name: \"Group D\",\n  value: 200,\n  color: \"success\"\n}];\nexport default function Dashboard(props) {\n  var classes = useStyles();\n  var theme = useTheme(); // local\n\n  var _useState = useState(\"monthly\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      mainChartState = _useState2[0],\n      setMainChartState = _useState2[1]; // form props\n\n\n  const _React$useState = React.useState({\n    medidor: '',\n    periodo: ''\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        values = _React$useState2[0],\n        setValues = _React$useState2[1];\n\n  const inputLabel = React.useRef(null);\n\n  const _React$useState3 = React.useState(0),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        labelWidth = _React$useState4[0],\n        setLabelWidth = _React$useState4[1]; // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current.offsetWidth);\n  // }, []);\n\n\n  const handleChange = event => {\n    setValues(oldValues => _objectSpread({}, oldValues, {\n      [event.target.name]: event.target.value\n    }));\n  }; //\n\n\n  return React.createElement(React.Fragment, null, React.createElement(PageTitle, {\n    title: \"Dashboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }), React.createElement(Grid, {\n    container: true,\n    spacing: 4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, mock.bigStat.map(stat => React.createElement(Grid, {\n    item: true,\n    md: 4,\n    sm: 6,\n    xs: 12,\n    key: stat.product,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266\n    },\n    __self: this\n  }, React.createElement(BigStat, Object.assign({}, stat, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  })))), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }, React.createElement(Paper, {\n    className: classes.formGrid,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    method: \"GET\",\n    action: \"controller\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"nomeDoTratadorDePagina\",\n    value: \"mvc.pagehandlers.Tratador_pagina2_jsp\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"form\",\n    value: \"form1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }), React.createElement(\"table\", {\n    className: classes.mainFormTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280\n    },\n    __self: this\n  }, React.createElement(\"tbody\", {\n    className: classes.mainFormBody,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281\n    },\n    __self: this\n  }, React.createElement(\"tr\", {\n    className: classes.mainFormRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    className: classes.mainFormItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"medidor-auto-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285\n    },\n    __self: this\n  }, \"Medidor\"), React.createElement(Select, {\n    value: values.medidor,\n    onChange: handleChange,\n    inputProps: {\n      name: 'medidor',\n      id: 'medidor-auto-width'\n    },\n    autoWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: 10,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295\n    },\n    __self: this\n  }, \"Ten\"), React.createElement(MenuItem, {\n    value: 20,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296\n    },\n    __self: this\n  }, \"Twenty\"), React.createElement(MenuItem, {\n    value: 30,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297\n    },\n    __self: this\n  }, \"Thirty\")))), React.createElement(\"td\", {\n    id: \"datafinal\",\n    className: classes.mainFormItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    id: \"date\",\n    label: \"Data final a ser exibida\",\n    type: \"date\",\n    defaultValue: \"2017-05-24\",\n    className: classes.textField,\n    InputLabelProps: {\n      shrink: true\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302\n    },\n    __self: this\n  })), React.createElement(\"td\", {\n    className: classes.mainFormItem,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    className: classes.formControl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314\n    },\n    __self: this\n  }, React.createElement(InputLabel, {\n    htmlFor: \"medidor-auto-width\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315\n    },\n    __self: this\n  }, \"Per\\xEDodo\"), React.createElement(Select, {\n    value: values.periodo,\n    onChange: handleChange,\n    inputProps: {\n      name: 'periodo',\n      id: 'periodo-auto-width'\n    },\n    autoWidth: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: \"ano\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325\n    },\n    __self: this\n  }, \"Ano\"), React.createElement(MenuItem, {\n    value: \"mes\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 326\n    },\n    __self: this\n  }, \"M\\xEAs\"), React.createElement(MenuItem, {\n    value: \"semana\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 327\n    },\n    __self: this\n  }, \"Semana\"), React.createElement(MenuItem, {\n    value: \"dia\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328\n    },\n    __self: this\n  }, \"Dia\"))))), React.createElement(\"tr\", {\n    className: classes.mainFormRow,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340\n    },\n    __self: this\n  }, React.createElement(\"td\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341\n    },\n    __self: this\n  }, React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: Queries.getRulesByMeasurement,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342\n    },\n    __self: this\n  }, \"Visualizar\")))))))), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353\n    },\n    __self: this\n  }, React.createElement(Widget, {\n    title: \"Gr\\xE1fico\",\n    upperTitle: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354\n    },\n    __self: this\n  }, React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 350,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 355\n    },\n    __self: this\n  }, React.createElement(LineChart, {\n    width: 500,\n    height: 300,\n    data: mock.lineChartData,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 5\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 356\n    },\n    __self: this\n  }, React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367\n    },\n    __self: this\n  }), React.createElement(XAxis, {\n    dataKey: \"name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368\n    },\n    __self: this\n  }), React.createElement(YAxis, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369\n    },\n    __self: this\n  }), React.createElement(Tooltip, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370\n    },\n    __self: this\n  }), React.createElement(Legend, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371\n    },\n    __self: this\n  }), React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"temperatura\",\n    stroke: theme.palette.primary.main,\n    activeDot: {\n      r: 8\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372\n    },\n    __self: this\n  }), React.createElement(Line, {\n    type: \"monotone\",\n    dataKey: \"pressao\",\n    stroke: theme.palette.secondary.main,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378\n    },\n    __self: this\n  }))))), React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387\n    },\n    __self: this\n  }, React.createElement(Widget, {\n    title: \"Medidas mais recentes\",\n    upperTitle: true,\n    noBodyPadding: true,\n    bodyClass: classes.tableWidget,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388\n    },\n    __self: this\n  }, React.createElement(Table, {\n    data: mock.table,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394\n    },\n    __self: this\n  })))));\n} // #######################################################################\n\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\n  var array = new Array(length).fill();\n  let lastValue;\n  return array.map((item, index) => {\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\n\n    while (randomValue <= min || randomValue >= max || lastValue && randomValue - lastValue > maxDiff) {\n      randomValue = Math.floor(Math.random() * multiplier + 1);\n    }\n\n    lastValue = randomValue;\n    return {\n      value: randomValue\n    };\n  });\n}\n\nfunction getMainChartData() {\n  var resultArray = [];\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\n\n  for (let i = 0; i < tablet.length; i++) {\n    resultArray.push({\n      tablet: tablet[i].value,\n      desktop: desktop[i].value,\n      mobile: mobile[i].value\n    });\n  }\n\n  return resultArray;\n}","map":{"version":3,"sources":["/Users/luisfernandolins/ChernoStation/client/src/pages/dashboard/Dashboard.js"],"names":["React","useState","Grid","LinearProgress","Select","OutlinedInput","MenuItem","TextField","InputLabel","FormControl","Button","Paper","useTheme","CartesianGrid","Legend","Tooltip","ResponsiveContainer","ComposedChart","AreaChart","LineChart","Line","Area","PieChart","Pie","Cell","YAxis","XAxis","useStyles","mock","Widget","PageTitle","Typography","Dot","Table","BigStat","Queries","mainChartData","getMainChartData","PieChartData","name","value","color","Dashboard","props","classes","theme","mainChartState","setMainChartState","medidor","periodo","values","setValues","inputLabel","useRef","labelWidth","setLabelWidth","handleChange","event","oldValues","target","bigStat","map","stat","product","formGrid","mainFormTable","mainFormBody","mainFormRow","mainFormItem","formControl","id","textField","shrink","getRulesByMeasurement","lineChartData","top","right","left","bottom","palette","primary","main","r","secondary","tableWidget","table","getRandomData","length","min","max","multiplier","maxDiff","array","Array","fill","lastValue","item","index","randomValue","Math","floor","random","resultArray","tablet","desktop","mobile","i","push"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Grid,\n  LinearProgress,\n  Select,\n  OutlinedInput,\n  MenuItem,\n  TextField,\n  InputLabel,\n  FormControl,\n  Button,\n  Paper,\n} from \"@material-ui/core\";\nimport { useTheme } from \"@material-ui/styles\";\nimport {\n  CartesianGrid,\n  Legend,\n  Tooltip,\n  ResponsiveContainer,\n  ComposedChart,\n  AreaChart,\n  LineChart,\n  Line,\n  Area,\n  PieChart,\n  Pie,\n  Cell,\n  YAxis,\n  XAxis,\n} from \"recharts\";\n\n// styles\nimport useStyles from \"./styles\";\n\n// components\nimport mock from \"./mock\";\nimport Widget from \"../../components/Widget\";\nimport PageTitle from \"../../components/PageTitle\";\nimport { Typography } from \"../../components/Wrappers\";\nimport Dot from \"../../components/Sidebar/components/Dot\";\nimport Table from \"./components/Table/Table\";\nimport BigStat from \"./components/BigStat/BigStat\";\nimport Queries from \"../../queries\";\n\nconst mainChartData = getMainChartData();\nconst PieChartData = [\n  { name: \"Group A\", value: 400, color: \"primary\" },\n  { name: \"Group B\", value: 300, color: \"secondary\" },\n  { name: \"Group C\", value: 300, color: \"warning\" },\n  { name: \"Group D\", value: 200, color: \"success\" },\n];\n\nexport default function Dashboard(props) {\n  var classes = useStyles();\n  var theme = useTheme();\n\n  // local\n  var [mainChartState, setMainChartState] = useState(\"monthly\");\n\n // form props\n  const [values, setValues] = React.useState({\n    medidor: '',\n    periodo: '',\n  });\n\n  const inputLabel = React.useRef(null);\n  const [labelWidth, setLabelWidth] = React.useState(0);\n  // React.useEffect(() => {\n  //   setLabelWidth(inputLabel.current.offsetWidth);\n  // }, []);\n\n  const handleChange = event => {\n    setValues(oldValues => ({\n      ...oldValues,\n      [event.target.name]: event.target.value,\n    }));\n  };\n  //\n\n  return (\n    <>\n      <PageTitle title=\"Dashboard\" />\n      <Grid container spacing={4}>\n        {/* <Grid item lg={3} md={8} sm={6} xs={12}>\n          <Widget\n            title=\"App Performance\"\n            upperTitle\n            className={classes.card}\n            bodyClass={classes.fullHeightBody}\n          >\n            <div className={classes.performanceLegendWrapper}>\n              <div className={classes.legendElement}>\n                <Dot color=\"warning\" />\n                <Typography\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                  className={classes.legendElementText}\n                >\n                  Integration\n                </Typography>\n              </div>\n              <div className={classes.legendElement}>\n                <Dot color=\"primary\" />\n                <Typography\n                  color=\"text\"\n                  colorBrightness=\"secondary\"\n                  className={classes.legendElementText}\n                >\n                  SDK\n                </Typography>\n              </div>\n            </div>\n            <div className={classes.progressSection}>\n              <Typography\n                size=\"md\"\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.progressSectionTitle}\n              >\n                Integration\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={30}\n                classes={{ barColorPrimary: classes.progressBar }}\n                className={classes.progress}\n              />\n            </div>\n            <div>\n              <Typography\n                size=\"md\"\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.progressSectionTitle}\n              >\n                SDK\n              </Typography>\n              <LinearProgress\n                variant=\"determinate\"\n                value={55}\n                classes={{ barColorPrimary: classes.progressBar }}\n                className={classes.progress}\n              />\n            </div>\n          </Widget>\n        </Grid>\n        <Grid item lg={3} md={8} sm={6} xs={12}>\n          <Widget\n            title=\"Server Overview\"\n            upperTitle\n            className={classes.card}\n            bodyClass={classes.fullHeightBody}\n          >\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n              >\n                60% / 37°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.secondary.main}\n                      fill={theme.palette.secondary.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n              >\n                54% / 31°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.primary.main}\n                      fill={theme.palette.primary.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n            <div className={classes.serverOverviewElement}>\n              <Typography\n                color=\"text\"\n                colorBrightness=\"secondary\"\n                className={classes.serverOverviewElementText}\n              >\n                57% / 21°С / 3.3 Ghz\n              </Typography>\n              <div className={classes.serverOverviewElementChartWrapper}>\n                <ResponsiveContainer height={50} width=\"99%\">\n                  <AreaChart data={getRandomData(10)}>\n                    <Area\n                      type=\"natural\"\n                      dataKey=\"value\"\n                      stroke={theme.palette.warning.main}\n                      fill={theme.palette.warning.light}\n                      strokeWidth={2}\n                      fillOpacity=\"0.25\"\n                    />\n                  </AreaChart>\n                </ResponsiveContainer>\n              </div>\n            </div>\n          </Widget>\n        </Grid>\n        <Grid item lg={3} md={4} sm={6} xs={12}>\n          <Widget title=\"Revenue Breakdown\" upperTitle className={classes.card}>\n            <Grid container spacing={2}>\n              <Grid item xs={6}>\n                <ResponsiveContainer width=\"100%\" height={144}>\n                  <PieChart margin={{ left: theme.spacing(2) }}>\n                    <Pie\n                      data={PieChartData}\n                      innerRadius={45}\n                      outerRadius={60}\n                      dataKey=\"value\"\n                    >\n                      {PieChartData.map((entry, index) => (\n                        <Cell\n                          key={`cell-${index}`}\n                          fill={theme.palette[entry.color].main}\n                        />\n                      ))}\n                    </Pie>\n                  </PieChart>\n                </ResponsiveContainer>\n              </Grid>\n              <Grid item xs={6}>\n                <div className={classes.pieChartLegendWrapper}>\n                  {PieChartData.map(({ name, value, color }, index) => (\n                    <div key={color} className={classes.legendItemContainer}>\n                      <Dot color={color} />\n                      <Typography style={{ whiteSpace: \"nowrap\" }}>\n                        &nbsp;{name}&nbsp;\n                      </Typography>\n                      <Typography color=\"text\" colorBrightness=\"secondary\">\n                        &nbsp;{value}\n                      </Typography>\n                    </div>\n                  ))}\n                </div>\n              </Grid>\n            </Grid>\n          </Widget>\n        </Grid> */}\n        {mock.bigStat.map(stat => (\n          <Grid item md={4} sm={6} xs={12} key={stat.product}>\n            <BigStat {...stat} />\n          </Grid>\n        ))}\n        {/* Form */}\n        <Grid item xs={12}>\n        <Paper className={classes.formGrid}>\n            <form method=\"GET\" action=\"controller\" >\n            <input type=\"hidden\"\n                   name=\"nomeDoTratadorDePagina\"\n                   value=\"mvc.pagehandlers.Tratador_pagina2_jsp\" />\n            <input type=\"hidden\"\n                   name=\"form\"\n                   value=\"form1\" />\n            <table className={classes.mainFormTable}>\n              <tbody className={classes.mainFormBody}>\n                <tr className={classes.mainFormRow}>\n                    <td className={classes.mainFormItem}>\n                    <FormControl className={classes.formControl}>\n                      <InputLabel htmlFor=\"medidor-auto-width\">Medidor</InputLabel>\n                      <Select\n                        value={values.medidor}\n                        onChange={handleChange}\n                        inputProps={{\n                          name: 'medidor',\n                          id: 'medidor-auto-width',\n                        }}\n                        autoWidth\n                      >\n                        <MenuItem value={10}>Ten</MenuItem>\n                        <MenuItem value={20}>Twenty</MenuItem>\n                        <MenuItem value={30}>Thirty</MenuItem>\n                      </Select>\n                    </FormControl>\n                    </td>\n            <td id=\"datafinal\" className={classes.mainFormItem}> \n            <TextField\n              id=\"date\"\n              label=\"Data final a ser exibida\"\n              type=\"date\"\n              defaultValue=\"2017-05-24\"\n              className={classes.textField}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />  \n            </td>\n            <td className={classes.mainFormItem}>\n                    <FormControl className={classes.formControl}>\n                      <InputLabel htmlFor=\"medidor-auto-width\">Período</InputLabel>\n                      <Select\n                        value={values.periodo}\n                        onChange={handleChange}\n                        inputProps={{\n                          name: 'periodo',\n                          id: 'periodo-auto-width',\n                        }}\n                        autoWidth\n                      >\n                        <MenuItem value={\"ano\"}>Ano</MenuItem>\n                        <MenuItem value={\"mes\"}>Mês</MenuItem>\n                        <MenuItem value={\"semana\"}>Semana</MenuItem>\n                        <MenuItem value={\"dia\"}>Dia</MenuItem>\n                      </Select>\n                    </FormControl>\n            </td>\n            \n            {/* <td className={classes.mainFormItem}>\n            <input type=\"Radio\" name=\"datatype\" value=\"table\" checked />Tabela\n            <input type=\"Radio\" name=\"datatype\" value=\"graphics\" />Gráfico\n            </td> */}\n            \n                </tr>\n            \n                <tr className={classes.mainFormRow}>\n                  <td>\n                    <Button variant=\"outlined\" onClick={Queries.getRulesByMeasurement}>\n                      Visualizar\n                    </Button>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </form>\n          </Paper>\n        </Grid>\n        {/* Form */}\n        <Grid item xs={12}>\n        <Widget title=\"Gráfico\" upperTitle>\n            <ResponsiveContainer width=\"100%\" height={350}>\n              <LineChart\n                width={500}\n                height={300}\n                data={mock.lineChartData}\n                margin={{\n                  top: 20,\n                  right: 30,\n                  left: 20,\n                  bottom: 5,\n                }}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"name\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"temperatura\"\n                  stroke={theme.palette.primary.main}\n                  activeDot={{ r: 8 }}\n                />\n                <Line\n                  type=\"monotone\"\n                  dataKey=\"pressao\"\n                  stroke={theme.palette.secondary.main}\n                />\n              </LineChart>\n            </ResponsiveContainer>\n          </Widget>\n        </Grid>\n        <Grid item xs={12}>\n          <Widget\n            title=\"Medidas mais recentes\"\n            upperTitle\n            noBodyPadding\n            bodyClass={classes.tableWidget}\n          >\n            <Table data={mock.table} />\n          </Widget>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n\n// #######################################################################\nfunction getRandomData(length, min, max, multiplier = 10, maxDiff = 10) {\n  var array = new Array(length).fill();\n  let lastValue;\n\n  return array.map((item, index) => {\n    let randomValue = Math.floor(Math.random() * multiplier + 1);\n\n    while (\n      randomValue <= min ||\n      randomValue >= max ||\n      (lastValue && randomValue - lastValue > maxDiff)\n    ) {\n      randomValue = Math.floor(Math.random() * multiplier + 1);\n    }\n\n    lastValue = randomValue;\n\n    return { value: randomValue };\n  });\n}\n\nfunction getMainChartData() {\n  var resultArray = [];\n  var tablet = getRandomData(31, 3500, 6500, 7500, 1000);\n  var desktop = getRandomData(31, 1500, 7500, 7500, 1500);\n  var mobile = getRandomData(31, 1500, 7500, 7500, 1500);\n\n  for (let i = 0; i < tablet.length; i++) {\n    resultArray.push({\n      tablet: tablet[i].value,\n      desktop: desktop[i].value,\n      mobile: mobile[i].value,\n    });\n  }\n\n  return resultArray;\n}\n"]},"metadata":{},"sourceType":"module"}